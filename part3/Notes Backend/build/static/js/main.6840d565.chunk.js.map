{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","content","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","console","log","noteService","initialNotes","notesToShow","filter","important","onClick","map","toggleImportance","find","n","changedNote","notesUpdate","catch","e","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","newNotes","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"yKAUeA,EARF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OACE,6BAAKA,EAAKC,W,gBCHRC,EAAU,aAkBD,EAhBA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAGA,EAASC,SAc3B,EAXA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAS5B,EANA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCqE5BK,EAhFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAKhBC,qBAAU,WACRC,QAAQC,IAAI,UACZC,IAEClB,MAAK,SAAAmB,GACJT,EAASS,QAEV,IAEH,IAuCMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAC1B,GAAD,OAAUA,EAAK2B,aAElE,OACE,gCACE,uCACA,8BACE,yBAAQC,QAAS,kBAAMT,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGO,EAAYI,KAAI,SAAC7B,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACN8B,iBAAkB,kBA9BD,SAACpB,GAC1BW,QAAQC,IAAR,wBAA8BZ,EAA9B,yBACA,IAAMV,EAAOc,EAAMiB,MAAK,SAAAC,GAAC,OAAIA,EAAEtB,KAAOA,KAChCuB,EAAW,2BAAOjC,GAAP,IAAa2B,WAAY3B,EAAK2B,YAE/CJ,EACQb,EAAIuB,GACX5B,MAAK,SAAA6B,GACJnB,EAASD,EAAMe,KAAI,SAAA7B,GAAI,OAAIA,EAAKU,KAAOA,EAAKV,EAAOkC,SAEpDC,OAAM,SAAAC,GACLC,MAAM,GAAD,OAAIrC,EAAJ,2BAmByBsC,CAAmBtC,EAAKU,MAF3CV,EAAKU,SAMhB,uBAAM6B,SA1DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBzC,QAASe,EACT2B,MAAM,IAAIC,MAAOC,cACjBlB,UAAWmB,KAAKC,SAAW,IAG7BxB,EACQmB,GACPrC,MAAK,SAAA2C,GACJjC,EAASD,EAAMmC,OAAOD,IACtB/B,EAAW,OAEZkB,OAAM,SAAAC,GACLC,MAAM,SAAD,OAAUD,QA2Cf,UACE,uBAAOc,MAAOlC,EAASmC,SAxCJ,SAACX,GACxBnB,QAAQC,IAAIkB,EAAMY,OAAOF,OACzBjC,EAAWuB,EAAMY,OAAOF,UAuCpB,wBAAQG,KAAK,SAAb,yBC3ERC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.6840d565.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note }) => {\n  return (\n    <li>{note.content}\n\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response=> response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n\r\nexport default {getAll, create, update}","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(false);\n\n  useEffect(() => {\n    console.log(\"effect\");\n    noteService\n    .getAll()\n    .then(initialNotes => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    };\n\n    noteService\n    .create(noteObject)\n    .then(newNotes => {\n      setNotes(notes.concat(newNotes));\n      setNewNote(\"\");\n    })\n    .catch(e => {\n      alert(`error ${e}`)\n    })\n  };\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const toggleImportanceOf = (id) => {\n    console.log( `importance of ${id} needs to be toggled`)\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService\n    .update(id, changedNote)\n    .then(notesUpdate => {\n      setNotes(notes.map(note => note.id !== id ? note : notesUpdate))\n    })\n    .catch(e => {\n      alert(`${note} is already deleted`)\n    })\n  }\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom'\nimport App from './App.js'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}